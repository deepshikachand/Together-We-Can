(()=>{var e={};e.id=9733,e.ids=[9733],e.modules={96330:e=>{"use strict";e.exports=require("@prisma/client")},10846:e=>{"use strict";e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},44870:e=>{"use strict";e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},3295:e=>{"use strict";e.exports=require("next/dist/server/app-render/after-task-async-storage.external.js")},29294:e=>{"use strict";e.exports=require("next/dist/server/app-render/work-async-storage.external.js")},63033:e=>{"use strict";e.exports=require("next/dist/server/app-render/work-unit-async-storage.external.js")},12412:e=>{"use strict";e.exports=require("assert")},79428:e=>{"use strict";e.exports=require("buffer")},55511:e=>{"use strict";e.exports=require("crypto")},94735:e=>{"use strict";e.exports=require("events")},81630:e=>{"use strict";e.exports=require("http")},55591:e=>{"use strict";e.exports=require("https")},11723:e=>{"use strict";e.exports=require("querystring")},79551:e=>{"use strict";e.exports=require("url")},28354:e=>{"use strict";e.exports=require("util")},74075:e=>{"use strict";e.exports=require("zlib")},98799:(e,t,s)=>{"use strict";s.r(t),s.d(t,{patchFetch:()=>y,routeModule:()=>v,serverHooks:()=>w,workAsyncStorage:()=>g,workUnitAsyncStorage:()=>f});var r={};s.r(r),s.d(r,{GET:()=>l,PUT:()=>m});var a=s(42706),n=s(28203),o=s(45994),i=s(96330),d=s(39187),u=s(64767),c=s(37702);let p=new i.PrismaClient;async function l(e){let t=new URL(e.url).pathname.split("/")[3];try{let e=await p.event.findUnique({where:{id:t},select:{id:!0,eventName:!0,description:!0,startDate:!0,endDate:!0,time:!0,location:!0,fullAddress:!0,latitude:!0,longitude:!0,expectedParticipants:!0,currentParticipants:!0,status:!0,statusReason:!0,statusUpdatedBy:!0,statusUpdatedAt:!0,postponedUntil:!0,createdAt:!0,updatedAt:!0,city:{select:{cityName:!0,state:!0,country:!0}},categories:{select:{categoryName:!0}},creator:{select:{id:!0,name:!0}},creatorId:!0,participants:{select:{userId:!0}}}});if(!e)return console.log("Returning 404: Event not found"),d.NextResponse.json({message:"Event not found"},{status:404});let s=new Date,r=e.status,a=e.statusReason,n=e.postponedUntil,o=!1,i=e.endDate||e.startDate;new Date(i)<s&&"completed"!==e.status&&"cancelled"!==e.status?(r="completed",a="Automatically completed as end date passed.",o=!0):"postponed"===e.status&&e.postponedUntil&&new Date(e.postponedUntil)<s?(r="upcoming",a="Automatically resumed after postponement period.",n=null,o=!0):"upcoming"===e.status&&new Date(e.startDate)<=s&&(!e.endDate||new Date(e.endDate)>=s)?(r="active",a="Automatically set to active as start date has passed.",o=!0):"active"===e.status&&i&&new Date(i)<s&&(r="completed",a="Automatically completed as end date passed while active.",o=!0);let u=e;o&&(u=await p.event.update({where:{id:e.id},data:{status:r,statusReason:a,statusUpdatedAt:s,postponedUntil:n},select:{id:!0,eventName:!0,description:!0,startDate:!0,endDate:!0,time:!0,location:!0,fullAddress:!0,latitude:!0,longitude:!0,expectedParticipants:!0,currentParticipants:!0,status:!0,statusReason:!0,statusUpdatedBy:!0,statusUpdatedAt:!0,postponedUntil:!0,createdAt:!0,updatedAt:!0,city:{select:{cityName:!0,state:!0,country:!0}},categories:{select:{categoryName:!0}},creator:{select:{id:!0,name:!0}},creatorId:!0,participants:{select:{userId:!0}}}}));let c={...u,city:u.city||{cityName:"Unknown",state:"Unknown",country:"Unknown"},categories:u.categories||[],participants:u.participants||[]};return d.NextResponse.json(c)}catch(e){return console.error("Error fetching event:",e),d.NextResponse.json({message:"Error fetching event"},{status:500})}finally{await p.$disconnect()}}async function m(e){let t=new URL(e.url).pathname.split("/")[3],s=await (0,u.getServerSession)(c.N);if(!s||!s.user)return d.NextResponse.json({message:"Unauthorized"},{status:401});try{let r,a;let n=await p.event.findUnique({where:{id:t},select:{creatorId:!0,status:!0}});if(!n)return console.error(`PUT /api/events/${t}: Event not found`),d.NextResponse.json({message:`Event with id ${t} not found.`},{status:404});if(n.creatorId!==s.user.id)return console.error(`PUT /api/events/${t}: Forbidden - user ${s.user.id} is not the creator.`),d.NextResponse.json({message:"Forbidden: You are not the creator of this event."},{status:403});if("completed"===n.status)return console.error(`PUT /api/events/${t}: Cannot edit a completed event.`),d.NextResponse.json({message:"Cannot edit a completed event."},{status:403});try{r=await e.json()}catch(e){return console.error(`PUT /api/events/${t}: Invalid JSON body.`,e),d.NextResponse.json({message:"Invalid JSON body."},{status:400})}if(!r||"object"!=typeof r)return console.error(`PUT /api/events/${t}: Payload is not a valid object. Received:`,r),d.NextResponse.json({message:"Invalid payload: must be a JSON object."},{status:400});console.log(`PUT /api/events/${t}: Received payload:`,r);let{eventName:o,description:i,category:u,startDate:c,endDate:l,fullAddress:m,status:v,statusReason:g,postponedUntil:f}=r;if(u){let e=await p.category.findUnique({where:{categoryName:u},select:{id:!0}});if(!e)return console.error(`PUT /api/events/${t}: Category '${u}' not found.`),d.NextResponse.json({message:`Category '${u}' not found.`},{status:400});e.id}if(!o||!i||!c||!m||!v)return console.error(`PUT /api/events/${t}: Missing required fields.`),d.NextResponse.json({message:"Missing required fields: eventName, description, startDate, fullAddress, status are required."},{status:400});if(!["upcoming","completed","cancelled","postponed"].includes(v))return console.error(`PUT /api/events/${t}: Invalid status '${v}'.`),d.NextResponse.json({message:`Invalid status provided: '${v}'.`},{status:400});if("postponed"===v&&!f)return console.error(`PUT /api/events/${t}: 'postponedUntil' is required when status is 'postponed'.`),d.NextResponse.json({message:"'postponedUntil' is required when status is 'postponed'."},{status:400});if(("cancelled"===v||"postponed"===v)&&!g)return console.error(`PUT /api/events/${t}: 'statusReason' is required when status is '${v}'.`),d.NextResponse.json({message:`statusReason is required when status is '${v}'.`},{status:400});let w=await p.event.findUnique({where:{id:t}});if(!w)return console.error(`PUT /api/events/${t}: Event not found for robust update`),d.NextResponse.json({message:`Event with id ${t} not found.`},{status:404});let y=w.categoryIds;if(u){let e=await p.category.findUnique({where:{categoryName:u},select:{id:!0}});if(!e)return console.error(`PUT /api/events/${t}: Category '${u}' not found.`),d.NextResponse.json({message:`Category '${u}' not found.`},{status:400});let s=e.id;w.categoryIds&&w.categoryIds[0]===s||(y=[s])}let x={eventName:o||w.eventName,description:i||w.description,startDate:c?new Date(c):w.startDate,endDate:l?new Date(l):w.endDate,fullAddress:m||w.fullAddress,status:v||w.status,statusUpdatedAt:new Date,statusUpdatedBy:s.user.email,categoryIds:y};("cancelled"===v||"postponed"===v)&&g&&(x.statusReason=g),"postponed"===v&&f&&(x.postponedUntil=new Date(f));try{let e={};if(o&&(e.eventName=o),i&&(e.description=i),m&&(e.fullAddress=m),c&&(e.startDate=new Date(c)),l&&(e.endDate=new Date(l)),v&&(e.status=v),u){let t=await p.category.findUnique({where:{categoryName:u},select:{id:!0}});t&&(e.categoryIds=[t.id])}console.log("Minimal updateData sent to Prisma:",e),a=await p.event.update({where:{id:t},data:e})}catch(e){return console.error(`PUT /api/events/${t}: Error updating event in database.`,e),e instanceof Error?(console.error("Error name:",e.name),console.error("Error message:",e.message),console.error("Error stack:",e.stack),"cause"in e&&console.error("Error cause:",e.cause)):console.error("Non-Error thrown:",e),d.NextResponse.json({message:"Error updating event in database.",error:String(e)},{status:500})}if(!a)return console.error(`PUT /api/events/${t}: Event not found after update.`),d.NextResponse.json({message:"Event not found after update."},{status:404});return console.log(`PUT /api/events/${t}: Successfully updated event.`),d.NextResponse.json(a)}catch(e){return console.error(`PUT /api/events/${t}: Unexpected error.`,e),d.NextResponse.json({message:"Unexpected error updating event.",error:String(e)},{status:500})}finally{await p.$disconnect()}}let v=new a.AppRouteRouteModule({definition:{kind:n.RouteKind.APP_ROUTE,page:"/api/events/[id]/route",pathname:"/api/events/[id]",filename:"route",bundlePath:"app/api/events/[id]/route"},resolvedPagePath:"E:\\Deepshika\\web development\\Together-We-Can-main\\src\\app\\api\\events\\[id]\\route.ts",nextConfigOutput:"",userland:r}),{workAsyncStorage:g,workUnitAsyncStorage:f,serverHooks:w}=v;function y(){return(0,o.patchFetch)({workAsyncStorage:g,workUnitAsyncStorage:f})}},96487:()=>{},78335:()=>{},37702:(e,t,s)=>{"use strict";s.d(t,{N:()=>u});var r=s(46814),a=s(96330),n=s(58964),o=s.n(n),i=s(91642);let d=new a.PrismaClient,u={adapter:(0,r.y)(d),providers:[(0,i.A)({name:"credentials",credentials:{email:{label:"Email",type:"email"},password:{label:"Password",type:"password"}},async authorize(e){if(!e?.email||!e?.password)throw Error("Invalid credentials");let t=await d.user.findUnique({where:{email:e.email}});if(!t||!t?.password)throw Error("Invalid credentials");if(!t.emailVerified)throw Error("Please verify your email address before signing in. Check your inbox for a verification link.");if(!await o().compare(e.password,t.password))throw Error("Invalid credentials");return t}})],callbacks:{jwt:async({token:e,user:t})=>(t&&(e.id=t.id),e),session:async({session:e,token:t})=>(e?.user&&(e.user.id=t.id),e)},session:{strategy:"jwt"},secret:process.env.NEXTAUTH_SECRET,debug:!1,pages:{signIn:"/auth/signin"}}}};var t=require("../../../../webpack-runtime.js");t.C(e);var s=e=>t(t.s=e),r=t.X(0,[638,5452,8964,5229],()=>s(98799));module.exports=r})();